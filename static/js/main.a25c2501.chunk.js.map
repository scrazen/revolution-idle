{"version":3,"sources":["logo.svg","serviceWorker.js","components/Circles.js","components/Upgrades.js","components/Game.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Counter","props","useState","redPercent","setRedPercent","orangePercent","setOrangePercent","yellowPercent","setYellowPercent","greenPercent","setGreenPercent","bluePercent","setBluePercent","purplePercent","setPurplePercent","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","colorFPS","red","orange","yellow","green","blue","purple","style","color","Circles","this","Component","Upgrades","background","gameData","money","Game","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,kKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CChBN,SAASC,EAAQC,GAAQ,IAAD,EACYC,mBAAS,GADrB,mBACjBC,EADiB,KACLC,EADK,OAEkBF,mBAAS,GAF3B,mBAEjBG,EAFiB,KAEFC,EAFE,OAGkBJ,mBAAS,GAH3B,mBAGjBK,EAHiB,KAGFC,EAHE,OAIgBN,mBAAS,GAJzB,mBAIjBO,EAJiB,KAIHC,EAJG,OAKcR,mBAAS,GALvB,mBAKjBS,EALiB,KAKJC,EALI,OAMkBV,mBAAS,GAN3B,mBAMjBW,EANiB,KAMFC,EANE,KAiBtB,OAWF,SAAqBC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IAtCJQ,EAAY,WAEVpB,GAAeD,EAAaF,EAAMwB,SAASC,KAAK,KAChDpB,GAAkBD,EAAgBJ,EAAMwB,SAASE,QAAQ,KACzDnB,GAAkBD,EAAgBN,EAAMwB,SAASG,QAAQ,KACzDlB,GAAiBD,EAAeR,EAAMwB,SAASI,OAAO,KACtDjB,GAAgBD,EAAcV,EAAMwB,SAASK,MAAM,KACnDhB,GAAkBD,EAAgBZ,EAAMwB,SAASM,QAAQ,OACxD,IAEI,6BACH,wBAAIC,MAAO,CAACC,MAAO,QAAS9B,GAC5B,wBAAI6B,MAAO,CAACC,MAAO,WAAY5B,GAC/B,wBAAI2B,MAAO,CAACC,MAAO,WAAY1B,GAC/B,wBAAIyB,MAAO,CAACC,MAAO,UAAWxB,GAC9B,wBAAIuB,MAAO,CAACC,MAAO,SAAUtB,GAC7B,wBAAIqB,MAAO,CAACC,MAAO,WAAYpB,IAyB9B,IAUQqB,EAVf,iLAEI,OACE,6BACE,kBAAClC,EAAD,CAASyB,SAAUU,KAAKlC,MAAMwB,gBAJtC,GAA6BW,aCjCdC,EAff,iLAEQ,OACI,6BACI,4BAAQL,MAAO,CAACM,WAAY,QAA5B,OACA,4BAAQN,MAAO,CAACM,WAAY,WAA5B,UACA,4BAAQN,MAAO,CAACM,WAAY,WAA5B,UACA,4BAAQN,MAAO,CAACM,WAAY,UAA5B,SACA,4BAAQN,MAAO,CAACM,WAAY,SAA5B,QACA,4BAAQN,MAAO,CAACM,WAAY,WAA5B,eAThB,GAA8BF,aCE1BG,EAAW,CACXC,MAAO,EACPf,SAAW,CACPC,IAAK,IACLC,OAAQ,IACRC,OAAQ,KACRC,MAAO,IACPC,KAAM,KACNC,OAAQ,OAcDU,EAXf,iLAEQ,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAShB,SAAUc,EAASd,gBAL5C,GAA0BW,aCR1BM,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SJ0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a25c2501.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component, useState, useEffect, useRef } from \"react\";\r\n\r\nfunction Counter(props) {\r\n  let [redPercent, setRedPercent] = useState(0);\r\n  let [orangePercent, setOrangePercent] = useState(0);\r\n  let [yellowPercent, setYellowPercent] = useState(0);\r\n  let [greenPercent, setGreenPercent] = useState(0);\r\n  let [bluePercent, setBluePercent] = useState(0);\r\n  let [purplePercent, setPurplePercent] = useState(0);\r\n  useInterval(() => {\r\n    // Your custom logic here\r\n    setRedPercent((redPercent + props.colorFPS.red)%100);\r\n    setOrangePercent((orangePercent + props.colorFPS.orange)%100);\r\n    setYellowPercent((yellowPercent + props.colorFPS.yellow)%100);\r\n    setGreenPercent((greenPercent + props.colorFPS.green)%100);\r\n    setBluePercent((bluePercent + props.colorFPS.blue)%100);\r\n    setPurplePercent((purplePercent + props.colorFPS.purple)%100);\r\n  }, 10);\r\n\r\n  return <div>\r\n      <h1 style={{color: 'red'}}>{redPercent}</h1>\r\n      <h1 style={{color: 'orange'}}>{orangePercent}</h1>\r\n      <h1 style={{color: 'yellow'}}>{yellowPercent}</h1>\r\n      <h1 style={{color: 'green'}}>{greenPercent}</h1>\r\n      <h1 style={{color: 'blue'}}>{bluePercent}</h1>\r\n      <h1 style={{color: 'purple'}}>{purplePercent}</h1>\r\n      </div>;\r\n}\r\n\r\n// Shamelessly borrowed from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest function.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport class Circles extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Counter colorFPS={this.props.colorFPS} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Circles;\r\n","import React, { Component } from 'react'\r\n\r\nexport class Upgrades extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button style={{background: 'red'}}>red</button>\r\n                <button style={{background: 'orange'}}>orange</button>\r\n                <button style={{background: 'yellow'}}>yellow</button>\r\n                <button style={{background: 'green'}}>green</button>\r\n                <button style={{background: 'blue'}}>blue</button>\r\n                <button style={{background: 'purple'}}>purple</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Upgrades\r\n","import React, { Component } from 'react'\r\nimport Circles from './Circles';\r\nimport Upgrades from './Upgrades';\r\n\r\nvar gameData = {\r\n    money: 0,\r\n    colorFPS : {\r\n        red: 0.06,\r\n        orange: 0.03,\r\n        yellow: 0.015,\r\n        green: 0.01,\r\n        blue: 0.008,\r\n        purple: 0.005\r\n    }\r\n}\r\nexport class Game extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Upgrades />\r\n                <Circles colorFPS={gameData.colorFPS} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './components/Game';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}